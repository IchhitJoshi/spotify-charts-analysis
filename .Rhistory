knitr::opts_chunk$set(echo = TRUE)
#load required libraries
library(dplyr)
library(spotifyr)
library(tidyverse)
library(knitr)
library(plyr)
library(readr)
library(purrr)
library(ggplot2)
library(gt)
library(MASS)
library(GGally)
library(pander)
#spotify developer credentials for API access
id <- '7dee9a4a30b244af877d32a8810c4eae'
secret <- 'a5aa86117d5a490a95d27ed4ad2cae3d'
Sys.setenv(SPOTIFY_CLIENT_ID = id)
Sys.setenv(SPOTIFY_CLIENT_SECRET = secret)
#get access token from spotify
access_token <- get_spotify_access_token()
#LOADING FINAL DATASET
spotify_charts_weekly_top_200 <- read.csv("spotify_charts_weekly_top_200.csv")
#get top 5 rows
spotify_charts_weekly_top_200 %>% head(n=5)
#get just the audio features part
audio_features = subset(spotify_charts_weekly_top_200, select = -c(Position,Streams,start_date,end_date,year, Track_Name, Artist_Name))
#remove duplicates
audio_features <- distinct(audio_features)
#get statistics for every unique song
song_stats <- spotify_charts_weekly_top_200 %>%
group_by(id, Track_Name, Artist_Name) %>%
dplyr::summarize(Peak_Position = min(Position),
Number_of_Weeks=n(),
Total_Streams = sum(Streams))
#get top 10 rows based on descending number of streams
top_10_songs_weekly_streams <- spotify_charts_weekly_top_200 %>% arrange(desc(Streams)) %>%
head(n = 10)
#create custom table
top_10_songs_weekly_streams %>% gt() %>%
tab_header(
title = "Top 10 Most-Streamed Songs in a Single Week",
subtitle = "From 2017 to 2022"
) %>% cols_label(
Track_Name = "Song",
Artist_Name = "Artist",
start_date = "Start Week",
end_date = "End Week"
) %>% fmt_number(
columns = Streams,
decimals = 0,
use_seps = TRUE
) %>%
tab_options(
table.background.color = "#191414",
) %>%
tab_style(
style = list(
cell_fill(color = "#1DB954"),
cell_text(weight = "bold")
),
locations = cells_body(
columns = c(start_date,end_date),
rows = Track_Name == "Easy On Me" | Track_Name == "As It Was" | Track_Name == "7 rings"
)) %>%
tab_footnote(
footnote = "Green indicates release week.",
locations = cells_column_labels(
columns = start_date
)
)
#get features of Easy on Me by id
audio_features %>% filter(id == "46IZ0fSY2mpAiktS3KOqds")
#get top 10 songs based on descending number of streams
top_10_songs_total_streams <- song_stats  %>% arrange(desc(Total_Streams)) %>% head(n = 10) %>% ungroup()
#add record labels manually
top_10_songs_total_streams$Record_Label <- c("Warner Music Group", "Universal Music Group","Warner Music Group", "Universal Music Group","Warner Music Group","Universal Music Group","Universal Music Group","Sony Music Entertainment","Universal Music Group","Sony Music Entertainment")
#create custom table
top_10_songs_total_streams %>% gt() %>%
tab_header(
title = "Top 10 Most-Streamed Songs Overall",
subtitle = "From 2017 to 2022"
) %>% cols_label(
Track_Name = "Song",
Artist_Name = "Artist",
Peak_Position = "Peak Position",
Number_of_Weeks = "Number of Weeks",
Total_Streams = "Total Streams",
Record_Label = "Record Label"
) %>% fmt_number(
columns = Total_Streams,
decimals = 0,
use_seps = TRUE
) %>%
tab_options(
table.background.color = "#191414",
)
#get features of Shape of You by id
audio_features %>% filter(id == "7qiZfU4dY1lWllzX7mPBI3")
#get statistics for every unique artist
artist_stats <- song_stats %>%
group_by(Artist_Name) %>%
dplyr::summarize(Total_Artist_Streams = sum(Total_Streams),
Number_of_Songs = n(),
Peak_Position = min(Peak_Position),
Max_Number_of_Weeks = max(Number_of_Weeks))
#get top 10 artists based on streams
top_10_artists <-  artist_stats %>% arrange(desc(Total_Artist_Streams)) %>% head(n = 10) %>% ungroup()
#create custom table
top_10_artists %>% gt() %>%
tab_header(
title = "Top 10 Most-Streamed Artists",
subtitle = "From 2017 to 2022"
) %>% cols_label(
Artist_Name = "Artist",
Peak_Position = "Peak Position",
Number_of_Songs = "Number of Songs",
Total_Artist_Streams = "Total Streams",
Max_Number_of_Weeks = "Max Number of Weeks"
) %>% fmt_number(
columns = Total_Artist_Streams,
decimals = 0,
use_seps = TRUE
) %>%
tab_options(
table.background.color = "#191414",
)
#combine song statistics with the audio features
Spotify_Charts_Top_Weekly_Songs <- song_stats  %>%
left_join(audio_features, by = "id") %>%
arrange(Artist_Name)
#get summary statistics by year
yearly_features <- spotify_charts_weekly_top_200 %>% group_by(year) %>%
dplyr::summarize(Yearly_Tempo = mean(tempo), Yearly_Valence = mean(valence))
#plot graph of average tempo by year
ggplot(yearly_features, aes(x = year, y = Yearly_Tempo, group = 1)) +
geom_line(color="green") + geom_point()+labs(x="Year", y="Average Song Tempo (in bpm)", title = "Average Song Tempo over the years") + theme_minimal() +  theme(plot.title=element_text(hjust=0.5))
#plot graph of average song valence by year
ggplot(yearly_features, aes(x = year, y = Yearly_Valence, group = 1)) +
geom_line(color="green") + geom_point()+labs(x="Year", y="Average Valence", title = "Average Song Valence over the years") + theme_minimal() +  theme(plot.title=element_text(hjust=0.5))
#plot bar chart of key of song
ggplot(data = Spotify_Charts_Top_Weekly_Songs , aes(x=key)) + geom_bar() +labs(x="Key", y="Number of Songs", title = "Number of songs by key") + theme_minimal() +  theme(plot.title=element_text(hjust=0.5))  + geom_text(
stat = "count",
aes(label = ..count..),
vjust = -0.5
)
#plot histogram of danceability
ggplot(Spotify_Charts_Top_Weekly_Songs , aes(x=danceability)) + geom_histogram(bins = 25) + labs(x="Danceability", y= "Number of songs", title = "Histogram of danceability of the Spotify Top Weekly songs from 2017 to present") + theme_minimal()
#get yearly data
spotify_charts_yearly <- spotify_charts_weekly_top_200 %>%
group_by(year) %>%
dplyr::summarize(Yearly_Streams = sum(Streams)/1000000000) %>% filter(year > 2016 & year < 2022)
#plot graph of year against total streams
ggplot(spotify_charts_yearly, aes(x = year, y = Yearly_Streams, group = 1)) +
geom_line(color="green") + geom_point()+labs(x="Year", y="Total Streams (in billions)", title = "Total Top 200 Global Weekly Spotify Streams from 2017 to 2021") + theme_minimal() +  theme(plot.title=element_text(hjust=0.5))
#get 2020 data
spotify_charts_2020 <- spotify_charts_weekly_top_200 %>% filter(year == 2020)
#get 2021 data
spotify_charts_2021 <- spotify_charts_weekly_top_200 %>% filter(year == 2021)
#generate t-test
pander(t.test(spotify_charts_2020$Streams, spotify_charts_2021$Streams))
#creating a model from Spotify_Charts_Top_Weekly_Songs with Peak_Position as the dependent variable and danceability + speechiness + valence + instrumentalness+ key + energy + mode + liveness as independent variables.
mod10 <- lm(Peak_Position ~ danceability + speechiness + valence + instrumentalness+ key + energy + mode + liveness, Spotify_Charts_Top_Weekly_Songs)
#view as table
pander(summary(mod10))
#check for collinearity between predictor variables
ggpairs(Spotify_Charts_Top_Weekly_Songs, columns=c("danceability", "speechiness", "instrumentalness", "energy"))
#creating a model from Spotify_Charts_Top_Weekly_Songs with Peak_Position as the dependent variable and danceability + speechiness + valence + instrumentalness as independent variables.
mod0 <- lm(Peak_Position ~ danceability + speechiness + instrumentalness + energy, Spotify_Charts_Top_Weekly_Songs)
#view as table
pander(summary(mod0))
#creating a model from Spotify_Charts_Top_Weekly_Songs with Number_of_Weeks as the dependent variable and danceability + speechiness + valence + liveness as independent variables.
mod1 <- lm(Number_of_Weeks ~ danceability + speechiness + valence + liveness, Spotify_Charts_Top_Weekly_Songs)
#view as table
pander(summary(mod1))
#correlation test as table
pander(cor.test(Spotify_Charts_Top_Weekly_Songs$Number_of_Weeks, Spotify_Charts_Top_Weekly_Songs$Peak_Position))
#creating a model from Spotify_Charts_Top_Weekly_Songs with Total_Streams as the dependent variable and Peak_Position and Number_of_Weeks as independent variables.
mod2 <- lm(Total_Streams ~ Number_of_Weeks + Peak_Position, Spotify_Charts_Top_Weekly_Songs)
#view as table
pander(summary(mod2))
ggplot(data = Spotify_Charts_Top_Weekly_Songs, aes(x=mod2$residuals)) + geom_histogram(bins = 10) + labs(x= "Residuals from model 2", y = "Frequency", title = "Histogram of model 2 residuals")
# get row of As It Was
Spotify_Charts_Top_Weekly_Songs %>% filter(id == "4LRPiXqCikLlN15c3yImP7")
#create sample data frame for as it was
asItWas1 <- data.frame(danceability = 0.52, speechiness = 0.0557, energy = 0.731, instrumentalness = 0.00101)
#predict peak position
pander(predict(mod0, asItWas1, interval = "confidence"))
#create sample data frame for as it was
asItWas2 <- data.frame(danceability = 0.52, speechiness = 0.0557, valence = 0.662, liveness = 0.311)
#predict number of weeks
pander(predict(mod1, asItWas2, interval = "confidence"))
#create sample data frame for as it was
newVals2 <- data.frame(Number_of_Weeks = 4, Peak_Position = 1)
#predict total streams
pander(predict(mod2, newVals2, interval = "confidence"))
#dataset
spotify_charts_weekly_top_200
Spotify_Charts_Top_Weekly_Songs
artist_stats
